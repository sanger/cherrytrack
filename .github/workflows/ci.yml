name: CI

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install pipenv
        run: |
          pip install pipenv
      - name: Install dependencies
        run: |
          pipenv sync --dev --system
      - name: Check format with black
        run: |
          # stop the build if there are black formatting errors
          python -m black --check .
  # flake8:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9
  #     - uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #     - name: Install pipenv
  #       run: |
  #         pip install pipenv
  #     - name: Install dependencies
  #       run: |
  #         pipenv sync --dev --system
  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8
  # mypy:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9
  #     - uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #     - name: Install pipenv
  #       run: |
  #         pip install pipenv
  #     - name: Install dependencies
  #       run: |
  #         pipenv sync --dev --system
  #     - name: Run mypy
  #       run: |
  #         python -m mypy .
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: psd_cherrytrack_test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Build and tag the image for testing
        run: >-
          docker build .
          --file Dockerfile
          --tag docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
      - name: Run tests against the image
        run: >-
          docker run
          --network host
          --env SETTINGS_PATH=config/test.py
          --entrypoint ''
          docker.pkg.github.com/${IMAGE_NAME}:${GITHUB_REF##*/}
          python -m pytest --no-cov -vx

      # - name: Install pipenv
      #   run: |
      #     pip install pipenv
      # - name: Install dependencies
      #   run: |
      #     pipenv sync --dev --system
      # - name: Create Cherrytrack testing database
      #   run: |
      #     python setup_psd_cherrytrack_test_db.py
      # - name: Test with pytest
      #   run: |
      #     python -m pytest -x
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v1
